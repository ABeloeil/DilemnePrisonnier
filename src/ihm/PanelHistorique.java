package ihm;

import java.util.List;
import java.util.Observable;
import java.util.Observer;
import partie.Partie;
import javax.swing.table.AbstractTableModel;
import partie.TourDePartie;

/**
 *
 * @author Arnaud
 */
public class PanelHistorique extends javax.swing.JPanel {

    private ModeleTableau modeleTab;

    /**
     * Creates new form PanelHistorique
     */
    public PanelHistorique(Partie unePartie) {
        modeleTab = new ModeleTableau(unePartie);
        initComponents();
    }

    public PanelHistorique() {
        this(new Partie());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Historique : "));

        jTable1.setModel(modeleTab);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private class ModeleTableau extends AbstractTableModel implements Observer {

        private final Partie partie;
        private String[] entetes = {"NÂ° de tour", "Choix A", "Choix B", "Gain A", "Gain B"};

        public ModeleTableau(Partie unePartie) {
            partie = unePartie;
            partie.addObserver(this);
        
        }

        @Override
        public int getRowCount() {
            return partie.getTours().size();
        }

        @Override
        public int getColumnCount() {
            return entetes.length;
        }

        @Override
        public String getColumnName(int columnIndex) {
            return entetes[columnIndex];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return partie.getTours().size() - rowIndex ;
                case 1:
                    return partie.getTours().get(partie.getTours().size() - (rowIndex + 1)).getChoixA();
                case 2:
                    return partie.getTours().get(partie.getTours().size() - (rowIndex + 1)).getChoixB();
                case 3:
                    return partie.getTours().get(partie.getTours().size() - (rowIndex + 1)).getGainA();
                case 4:
                    return partie.getTours().get(partie.getTours().size() - (rowIndex + 1)).getGainB();
                default:
                    return null;
            }
        }

        @Override
        public void update(Observable o, Object arg) {
            fireTableRowsInserted(partie.getTours().size() - 1, partie.getTours().size() - 1);
        }
    }
}
